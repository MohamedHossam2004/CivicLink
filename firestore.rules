rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is an advertiser
    function isAdvertiser() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'advertiser';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      let userType = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type;
      return isAuthenticated() && (userType == 'admin' || userType == 'Admin');
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && request.auth.uid == userId;
      allow delete: if isAdmin();
    }

    match /announcements/{doc} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /savedAnnouncements/{doc} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && 
        (resource.data.userId == request.auth.uid || isAdmin());
    }

    match /announcementComments/{doc} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if isAdmin();
    }

    match /tasks/{doc} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
      allow update: if request.auth != null && (
        // Allow admin to update any field
        isAdmin() ||
        // Allow volunteers to only update volunteeredUsers and currVolunteers
        (
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['volunteeredUsers', 'currVolunteers']) &&
          request.resource.data.currVolunteers >= 0 &&
          request.resource.data.currVolunteers <= request.resource.data.maxVolunteers
        )
      );
    }

    match /tasks/{taskId}/volunteers/{doc} {
      allow read, write: if request.auth != null;
    }

    match /reports/{doc} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /advertisements/{advertisementId} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.status == 'pending';
      allow update: if (isAdmin() || 
        (isAdvertiser() && resource.data.userId == request.auth.uid)) &&
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['name', 'imageUrls', 'location', 'documentUrl', 'status']);
      allow delete: if isAdmin() || 
        (isAdvertiser() && resource.data.userId == request.auth.uid);
    }

    // Helper function to check if user is regular user (not admin or advertiser)
    function isRegularUser() {
      let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return isAuthenticated() && 
        (userData.type == 'user' || userData.type == null);  // Allow both 'user' type and null type
    }

    match /polls/{pollId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();  // Only admin can create/edit/delete polls
      
      // Poll choices subcollection
      match /choices/{choiceId} {
        allow read: if true;
        allow write: if isAdmin();
      }
      
      // Poll comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated() && 
          request.resource.data.userId == request.auth.uid &&
          request.resource.data.createdAt is timestamp;
        allow update, delete: if false;
      }
    }

    match /polls/{pollId}/choices/{choiceId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();  // Only admin can create/edit/delete choices
    }

    match /pollVotes/{doc} {
      allow read: if request.auth != null;
      allow create: if isAuthenticated() && 
        // Check if user is not admin and not advertiser
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type != 'admin' &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type != 'advertiser' &&
        // Ensure the vote is for the current user
        request.resource.data.userId == request.auth.uid &&
        // Ensure the poll exists
        exists(/databases/$(database)/documents/polls/$(request.resource.data.pollId)) &&
        // Ensure the choice exists
        exists(/databases/$(database)/documents/polls/$(request.resource.data.pollId)/choices/$(request.resource.data.choiceId));
      allow update, delete: if false;
    }

    match /chats/{chatId} {
      allow read, write: if request.auth != null;
    }

    match /chats/{chatId}/messages/{messageId} {
      allow read, write: if request.auth != null;
    }

    // Complaints collection
    match /complaints/{complaintId} {
      allow read: if isAuthenticated() && 
        (isAdmin() || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid &&
        request.resource.data.status == 'pending';
      allow update: if isAdmin() && 
        request.resource.data.diff(resource.data).affectedKeys()
          .hasOnly(['status', 'adminResponse']);
      allow delete: if isAdmin();
    }

    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (isAdmin() || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isAdmin() || resource.data.userId == request.auth.uid);
      allow delete: if isAuthenticated() && (isAdmin() || resource.data.userId == request.auth.uid);
    }

    // Other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}