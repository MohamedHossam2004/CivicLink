rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is an advertiser
    function isAdvertiser() {
      let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return isAuthenticated() && userData.type == 'advertiser';
    }

    match /users/{uid} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null && request.auth.uid == uid;
    }

    match /announcements/{doc} {
      allow read: if true;
      allow create, update, delete: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'Admin';
    }

    match /savedAnnouncements/{doc} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /announcementComments/{doc} {
      allow read: if true;
      allow create: if request.auth != null;
    }

    match /tasks/{doc} {
      allow read: if true;
      allow create, delete: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'Admin';
      allow update: if request.auth != null && (
        // Allow admin to update any field
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'Admin' ||
        // Allow volunteers to only update volunteeredUsers and currVolunteers
        (
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['volunteeredUsers', 'currVolunteers']) &&
          request.resource.data.currVolunteers >= 0 &&
          request.resource.data.currVolunteers <= request.resource.data.maxVolunteers
        )
      );
    }

    match /tasks/{taskId}/volunteers/{doc} {
      allow read, write: if request.auth != null;
    }

    match /reports/{doc} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    match /advertisements/{doc} {
      allow read: if true;
      allow create: if isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'advertiser';
      allow update: if isAuthenticated() && (
        // Allow admin to update status
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'Admin' &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status'])) ||
        // Allow advertiser to update their own ads
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'advertiser' &&
         resource.data.userId == request.auth.uid)
      );
      allow delete: if isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'advertiser' &&
        resource.data.userId == request.auth.uid;
    }

    match /polls/{pollId} {
      allow read: if true;
      allow create: if request.auth != null;
    }

    match /polls/{pollId}/choices/{choiceId} {
      allow read, write: if request.auth != null;
    }

    match /pollVotes/{doc} {
      allow create: if request.auth != null;
    }

    match /chats/{chatId} {
      allow read, write: if request.auth != null;
    }

    match /chats/{chatId}/messages/{messageId} {
      allow read, write: if request.auth != null;
    }
  }
}